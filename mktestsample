#!/usr/bin/python3

import argparse
import logging
import sys
from pathlib import Path
from typing import Any

from rich.logging import RichHandler

from mktestsamplelib.common import MinimizeFile, BackendUnavailable

log = logging.getLogger("minimize")


class Fail(Exception):
    """Exception raised to show the user an error message."""


def main() -> None:
    parser = argparse.ArgumentParser(
        description="Replace data in sample files with zeroes, to be"
        " used as test data without bloating code repositories"
    )
    parser.add_argument(
        "-v", "--verbose", action="store_true", help="verbose output"
    )
    parser.add_argument("--debug", action="store_true", help="verbose output")
    parser.add_argument(
        "-c",
        "--check",
        action="store_true",
        help="don't replace files, only check what would be done",
    )
    parser.add_argument("files", nargs="+", type=Path, help="files to minimize")
    args = parser.parse_args()

    FORMAT = "%(message)s"
    handler_args: dict[str, Any] = {}
    if args.debug:
        log_level = logging.DEBUG
    elif args.verbose:
        log_level = logging.INFO
        handler_args["show_path"] = False
        handler_args["show_time"] = False
    else:
        log_level = logging.WARN
        handler_args["show_path"] = False
        handler_args["show_time"] = False

    logging.basicConfig(
        level=log_level,
        format=FORMAT,
        datefmt="[%X]",
        handlers=[RichHandler(**handler_args)],
    )

    for path in args.files:
        try:
            if (minimizer := MinimizeFile.for_path(path)) is None:
                log.warning(
                    "%s: file name has an unknown/unsupported extension: skipped",
                    path,
                )
                continue
        except BackendUnavailable as e:
            log.warning("%s: minimizer backend is not available: skipped", path)
            continue

        if args.check:
            minimizer.check()
        else:
            minimizer.minimize()


if __name__ == "__main__":
    try:
        main()
    except Fail as e:
        print(e, file=sys.stderr)
        sys.exit(1)
