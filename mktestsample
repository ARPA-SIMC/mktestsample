#!/usr/bin/python3

from __future__ import annotations
import argparse
import logging
import sys

try:
    import coloredlogs
except ModuleNotFoundError:
    coloredlogs = None


log = logging.getLogger("minimize")


class Fail(Exception):
    pass


def main():
    parser = argparse.ArgumentParser(description="Replace data in GRIB samples with zeroes")
    parser.add_argument("-v", "--verbose", action="store_true",
                        help="verbose output")
    parser.add_argument("--debug", action="store_true",
                        help="verbose output")
    parser.add_argument("files", nargs="+",
                        help="files to minimize")
    args = parser.parse_args()

    FORMAT = "%(asctime)-15s %(levelname)s %(name)s %(message)s"
    if args.debug:
        log_level = logging.DEBUG
    elif args.verbose:
        log_level = logging.INFO
    else:
        log_level = logging.WARN

    if coloredlogs is not None:
        coloredlogs.install(level=log_level, fmt=FORMAT, logger=log)
    else:
        logging.basicConfig(level=log_level, stream=sys.stderr, format=FORMAT)

    for fname in args.files:
        if fname.endswith(".arkimet"):
            from mktestsamplelib.arkimet import MinimizeArkimet
            MinimizeArkimet(fname).minimize()
        elif fname.endswith(".grib"):
            from mktestsample.grib import MinimizeGRIB
            MinimizeGRIB(fname).minimize()
        else:
            log.warning("%s: file name has an unknown/unsupported extension: skipped", fname)
            continue


if __name__ == "__main__":
    try:
        sys.exit(main())
    except Fail as e:
        print(e, file=sys.stderr)
        sys.exit(1)
